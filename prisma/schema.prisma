// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model items {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  catagory itemCatagory[]
}

model itemCatagory {
  items    items  @relation(fields: [id], references: [id])
  name     String
  weight   Int
  quantity Int
  id       String @id @default(auto()) @map("_id") @db.ObjectId

  itemsId String? @db.ObjectId
}

model templete {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  profile profile[]
}

model profile {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  classes    classes[]
  xp         Int
  background String
  strength   String
  weakness   String
  template   templete  @relation(fields: [id], references: [id])
  // image??
  image      image[]
}

model lv {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  value      Int
  selected   Boolean
  proBonus   Int
  experience Int
}

model image {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  avatar  Bytes
  alt     String
  profile profile? @relation(fields: [id], references: [id])
}

model races {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  race        String
  racialBonus String
  speed       Int
  size        String
  subRaces    subRaces[]
}

model subRaces {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  race         races      @relation(fields: [parentRaceID], references: [id])
  parentRaceID String     @db.ObjectId
  variants     String
  heritages    heritage[]
}

model heritage {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  subRaces     subRaces @relation(fields: [subRacesID], references: [id])
  subRacesID   String   @db.ObjectId
  denomination String
}

model classes {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  class   String
  profile profile @relation(fields: [id], references: [id])
}

model Languages {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  ancestralgroup String
  variants       Variant[]
}

model Variant {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  language    String
  written     Boolean?
  spoken      Boolean?
  inflection  Boolean?
  proficiency Boolean?
  dialects    Dialect[]

  parentLanguage   Languages @relation(references: [id], fields: [parentLanguageID])
  parentLanguageID String    @db.ObjectId
}

model Dialect {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  language        String?
  written         Boolean?
  spoken          Boolean?
  inflection      Boolean?
  proficiency     Boolean?
  parentVariant   Variant? @relation(references: [id], fields: [parentVariantID])
  parentVariantID String?  @db.ObjectId
}

enum Role {
  USER
  ADMIN
}
